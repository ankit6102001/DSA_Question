# -*- coding: utf-8 -*-
"""Minimum_Difficulty_of_a_Job_Schedule.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uD6wk946bjgac52KMpFuHD25AnJ9GAU4
"""

# Leetcode : https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/

class Solution:
    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:
        if len(jobDifficulty) < d:
            return -1

        cache={}
        def dfs(i,d,cur_max):
            if i == len(jobDifficulty):
                return 0 if d ==0 else float("inf")

            if d==0:
                return float("inf")

            if (i,d,cur_max) in cache:
                return cache[(i,d,cur_max)]

            cur_max=max(cur_max,jobDifficulty[i])
            res=min(
                dfs(i+1,d,cur_max),
                cur_max + dfs(i+1,d-1,-1)
            )
            cache[(i,d,cur_max)]=res
            return res

        return dfs(0,d,-1)